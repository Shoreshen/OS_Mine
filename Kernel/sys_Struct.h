#pragma once
#include "sys_Def.h"
#include <stdarg.h>

#pragma region TSS
    typedef struct __attribute__((__packed__)) {
        unsigned int ZERO0; 
        unsigned long RSP0;
        unsigned long RSP1;
        unsigned long RSP2;
        unsigned long ZERO1;
        unsigned long IST1;
        unsigned long IST2;
        unsigned long IST3;
        unsigned long IST4;
        unsigned long IST5;
        unsigned long IST6;
        unsigned long IST7;
        unsigned long ZERO2;
        unsigned short ZERO3;
        unsigned short IO_Base;
    } TSS_Struct;

	TSS_Struct TSS_TABLE[NR_CPUS];//Defined head.S
#pragma endregion

#pragma region spinlock
	typedef struct{
		__volatile__ unsigned long lock;
	}spinlock_T;
#pragma endregion

#pragma region Display
	typedef struct{
		int XResolution;
		int YResolution;

		int XPosition;
		int YPosition;

		int XCharSize;
		int YCharSize;

		int XPosMax;
		int YPosMax;

		unsigned int *FB_addr;
		unsigned long FB_length;

		spinlock_T	print_lock;
	} position;
	unsigned char font_ascii[256][16]=
	{
		/*	0000	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0010	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0020	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0030	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x00,0x00,0x10,0x10,0x00,0x00},	//33	'!'
		{0x28,0x28,0x28,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'"'
		{0x00,0x44,0x44,0x44,0xfe,0x44,0x44,0x44,0x44,0x44,0xfe,0x44,0x44,0x44,0x00,0x00},	//	'#'
		{0x10,0x3a,0x56,0x92,0x92,0x90,0x50,0x38,0x14,0x12,0x92,0x92,0xd4,0xb8,0x10,0x10},	//	'$'
		{0x62,0x92,0x94,0x94,0x68,0x08,0x10,0x10,0x20,0x2c,0x52,0x52,0x92,0x8c,0x00,0x00},	//	'%'
		{0x00,0x70,0x88,0x88,0x88,0x90,0x60,0x47,0xa2,0x92,0x8a,0x84,0x46,0x39,0x00,0x00},	//	'&'
		{0x04,0x08,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'''

		/*	0040	*/
		{0x02,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x08,0x08,0x04,0x02,0x00},	//	'('
		{0x80,0x40,0x20,0x20,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x20,0x20,0x40,0x80,0x00},	//	')'
		{0x00,0x00,0x00,0x00,0x00,0x10,0x92,0x54,0x38,0x54,0x92,0x10,0x00,0x00,0x00,0x00},	//	'*'
		{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x10,0xfe,0x10,0x10,0x10,0x00,0x00,0x00,0x00},	//	'+'
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x08,0x08,0x10},	//	','
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'-'
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},	//	'.'
		{0x02,0x02,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x40,0x40,0x80,0x80},	//	'/'
		{0x00,0x18,0x24,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x24,0x18,0x00,0x00},	//48	'0'
		{0x00,0x08,0x18,0x28,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3e,0x00,0x00},	//	'1'

		/*	0050	*/
		{0x00,0x18,0x24,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x20,0x40,0x40,0x7e,0x00,0x00},	//	'2'
		{0x00,0x18,0x24,0x42,0x02,0x02,0x04,0x18,0x04,0x02,0x02,0x42,0x24,0x18,0x00,0x00},	//	'3'
		{0x00,0x0c,0x0c,0x0c,0x14,0x14,0x14,0x24,0x24,0x44,0x7e,0x04,0x04,0x1e,0x00,0x00},	//	'4'
		{0x00,0x7c,0x40,0x40,0x40,0x58,0x64,0x02,0x02,0x02,0x02,0x42,0x24,0x18,0x00,0x00},	//	'5'
		{0x00,0x18,0x24,0x42,0x40,0x58,0x64,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00},	//	'6'
		{0x00,0x7e,0x42,0x42,0x04,0x04,0x08,0x08,0x08,0x10,0x10,0x10,0x10,0x38,0x00,0x00},	//	'7'
		{0x00,0x18,0x24,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x24,0x18,0x00,0x00},	//	'8'
		{0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x26,0x1a,0x02,0x42,0x24,0x18,0x00,0x00},	//	'9'
		{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00},	//58	':'
		{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,0x08,0x08,0x10},	//	';'

		/*	0060	*/
		{0x00,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x00},	//	'<'
		{0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00,0x00,0xfe,0x00,0x00,0x00,0x00,0x00,0x00},	//	'='
		{0x00,0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00},	//	'>'
		{0x00,0x38,0x44,0x82,0x82,0x82,0x04,0x08,0x10,0x10,0x00,0x00,0x18,0x18,0x00,0x00},	//	'?'
		{0x00,0x38,0x44,0x82,0x9a,0xaa,0xaa,0xaa,0xaa,0xaa,0x9c,0x80,0x46,0x38,0x00,0x00},	//	'@'
		{0x00,0x18,0x18,0x18,0x18,0x24,0x24,0x24,0x24,0x7e,0x42,0x42,0x42,0xe7,0x00,0x00},	//65	'A'
		{0x00,0xf0,0x48,0x44,0x44,0x44,0x48,0x78,0x44,0x42,0x42,0x42,0x44,0xf8,0x00,0x00},	//	'B'
		{0x00,0x3a,0x46,0x42,0x82,0x80,0x80,0x80,0x80,0x80,0x82,0x42,0x44,0x38,0x00,0x00},	//	'C'
		{0x00,0xf8,0x44,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0x44,0xf8,0x00,0x00},	//	'D'
		{0x00,0xfe,0x42,0x42,0x40,0x40,0x44,0x7c,0x44,0x40,0x40,0x42,0x42,0xfe,0x00,0x00},	//	'E'

		/*	0070	*/
		{0x00,0xfe,0x42,0x42,0x40,0x40,0x44,0x7c,0x44,0x44,0x40,0x40,0x40,0xf0,0x00,0x00},	//	'F'
		{0x00,0x3a,0x46,0x42,0x82,0x80,0x80,0x9e,0x82,0x82,0x82,0x42,0x46,0x38,0x00,0x00},	//	'G'
		{0x00,0xe7,0x42,0x42,0x42,0x42,0x42,0x7e,0x42,0x42,0x42,0x42,0x42,0xe7,0x00,0x00},	//	'H'
		{0x00,0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7c,0x00,0x00},	//	'I'
		{0x00,0x1f,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x84,0x48,0x30,0x00},	//	'J'
		{0x00,0xe7,0x42,0x44,0x48,0x50,0x50,0x60,0x50,0x50,0x48,0x44,0x42,0xe7,0x00,0x00},	//	'K'
		{0x00,0xf0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0x42,0xfe,0x00,0x00},	//	'L'
		{0x00,0xc3,0x42,0x66,0x66,0x66,0x5a,0x5a,0x5a,0x42,0x42,0x42,0x42,0xe7,0x00,0x00},	//	'M'
		{0x00,0xc7,0x42,0x62,0x62,0x52,0x52,0x52,0x4a,0x4a,0x4a,0x46,0x46,0xe2,0x00,0x00},	//	'N'
		{0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},	//	'O'

		/*	0080	*/
		{0x00,0xf8,0x44,0x42,0x42,0x42,0x44,0x78,0x40,0x40,0x40,0x40,0x40,0xf0,0x00,0x00},	//	'P'
		{0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x92,0x8a,0x44,0x3a,0x00,0x00},	//	'Q'
		{0x00,0xfc,0x42,0x42,0x42,0x42,0x7c,0x44,0x42,0x42,0x42,0x42,0x42,0xe7,0x00,0x00},	//	'R'
		{0x00,0x3a,0x46,0x82,0x82,0x80,0x40,0x38,0x04,0x02,0x82,0x82,0xc4,0xb8,0x00,0x00},	//	'S'
		{0x00,0xfe,0x92,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7c,0x00,0x00},	//	'T'
		{0x00,0xe7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x3c,0x00,0x00},	//	'U'
		{0x00,0xe7,0x42,0x42,0x42,0x42,0x24,0x24,0x24,0x24,0x18,0x18,0x18,0x18,0x00,0x00},	//	'V'
		{0x00,0xe7,0x42,0x42,0x42,0x5a,0x5a,0x5a,0x5a,0x24,0x24,0x24,0x24,0x24,0x00,0x00},	//	'W'
		{0x00,0xe7,0x42,0x42,0x24,0x24,0x24,0x18,0x24,0x24,0x24,0x42,0x42,0xe7,0x00,0x00},	//	'X'
		{0x00,0xee,0x44,0x44,0x44,0x28,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x7c,0x00,0x00},	//	'Y'

		/*	0090	*/
		{0x00,0xfe,0x84,0x84,0x08,0x08,0x10,0x10,0x20,0x20,0x40,0x42,0x82,0xfe,0x00,0x00},	//	'Z'
		{0x00,0x3e,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x3e,0x00},	//91	'['
		{0x80,0x80,0x40,0x40,0x20,0x20,0x20,0x10,0x10,0x08,0x08,0x04,0x04,0x04,0x02,0x02},	//	'\'
		{0x00,0x7c,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x7c,0x00},	//	']'
		{0x00,0x10,0x28,0x44,0x82,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'^'
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x00},	//	'_'
		{0x10,0x08,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'`'
		{0x00,0x00,0x00,0x00,0x00,0x70,0x08,0x04,0x3c,0x44,0x84,0x84,0x8c,0x76,0x00,0x00},	//97	'a'
		{0xc0,0x40,0x40,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x42,0x42,0x64,0x58,0x00,0x00},	//	'b'
		{0x00,0x00,0x00,0x00,0x00,0x30,0x4c,0x84,0x84,0x80,0x80,0x82,0x44,0x38,0x00,0x00},	//	'c'

		/*	0100	*/
		{0x0c,0x04,0x04,0x04,0x04,0x34,0x4c,0x84,0x84,0x84,0x84,0x84,0x4c,0x36,0x00,0x00},	//	'd'
		{0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x82,0x82,0xfc,0x80,0x82,0x42,0x3c,0x00,0x00},	//	'e'
		{0x0e,0x10,0x10,0x10,0x10,0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7c,0x00,0x00},	//	'f'
		{0x00,0x00,0x00,0x00,0x00,0x36,0x4c,0x84,0x84,0x84,0x84,0x4c,0x34,0x04,0x04,0x38},	//	'g'
		{0xc0,0x40,0x40,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x42,0x42,0x42,0xe3,0x00,0x00},	//	'h'
		{0x00,0x10,0x10,0x00,0x00,0x30,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},	//	'i'
		{0x00,0x04,0x04,0x00,0x00,0x0c,0x04,0x04,0x04,0x04,0x04,0x04,0x04,0x08,0x08,0x30},	//	'j'
		{0xc0,0x40,0x40,0x40,0x40,0x4e,0x44,0x48,0x50,0x60,0x50,0x48,0x44,0xe6,0x00,0x00},	//	'k'
		{0x30,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00},	//	'l'
		{0x00,0x00,0x00,0x00,0x00,0xf6,0x49,0x49,0x49,0x49,0x49,0x49,0x49,0xdb,0x00,0x00},	//	'm'

		/*	0110	*/
		{0x00,0x00,0x00,0x00,0x00,0xd8,0x64,0x42,0x42,0x42,0x42,0x42,0x42,0xe3,0x00,0x00},	//	'n'
		{0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00},	//	'o'
		{0x00,0x00,0x00,0x00,0xd8,0x64,0x42,0x42,0x42,0x42,0x42,0x64,0x58,0x40,0x40,0xe0},	//	'p'
		{0x00,0x00,0x00,0x00,0x34,0x4c,0x84,0x84,0x84,0x84,0x84,0x4c,0x34,0x04,0x04,0x0e},	//	'q'
		{0x00,0x00,0x00,0x00,0x00,0xdc,0x62,0x42,0x40,0x40,0x40,0x40,0x40,0xe0,0x00,0x00},	//	'r'
		{0x00,0x00,0x00,0x00,0x00,0x7a,0x86,0x82,0xc0,0x38,0x06,0x82,0xc2,0xbc,0x00,0x00},	//	's'
		{0x00,0x00,0x10,0x10,0x10,0x7c,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x0e,0x00,0x00},	//	't'
		{0x00,0x00,0x00,0x00,0x00,0xc6,0x42,0x42,0x42,0x42,0x42,0x42,0x46,0x3b,0x00,0x00},	//	'u'
		{0x00,0x00,0x00,0x00,0x00,0xe7,0x42,0x42,0x42,0x24,0x24,0x24,0x18,0x18,0x00,0x00},	//	'v'
		{0x00,0x00,0x00,0x00,0x00,0xe7,0x42,0x42,0x5a,0x5a,0x5a,0x24,0x24,0x24,0x00,0x00},	//	'w'

		/*	0120	*/
		{0x00,0x00,0x00,0x00,0x00,0xc6,0x44,0x28,0x28,0x10,0x28,0x28,0x44,0xc6,0x00,0x00},	//	'x'
		{0x00,0x00,0x00,0x00,0x00,0xe7,0x42,0x42,0x24,0x24,0x24,0x18,0x18,0x10,0x10,0x60},	//	'y'
		{0x00,0x00,0x00,0x00,0x00,0xfe,0x82,0x84,0x08,0x10,0x20,0x42,0x82,0xfe,0x00,0x00},	//	'z'
		{0x00,0x06,0x08,0x10,0x10,0x10,0x10,0x60,0x10,0x10,0x10,0x10,0x08,0x06,0x00,0x00},	//	'{'
		{0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10},	//	'|'
		{0x00,0x60,0x10,0x08,0x08,0x08,0x08,0x06,0x08,0x08,0x08,0x08,0x10,0x60,0x00,0x00},	//	'}'
		{0x00,0x72,0x8c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},	//	'~'
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0130	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},


		/*	0140	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0150	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0160	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0170	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0180	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0190	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0200	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0210	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0220	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0230	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0240	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},

		/*	0250~0255	*/
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
		{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},


	};
#pragma endregion

#pragma region GDT
	typedef struct{
		unsigned short RPL:2;
		unsigned short TI:1;
		unsigned short IS:13;
	} selector;
    typedef struct{
        unsigned long ZERO0 :40;
        unsigned long TYPE  :4;
        unsigned long S     :1;
        unsigned long DPL   :2;
        unsigned long p     :1;
        unsigned long ZERO2 :4;
        unsigned long AVL   :1;
        unsigned long L     :1;
        unsigned long DB    :1;
        unsigned long G     :1;
        unsigned long ZERO1 :8;
    } GDT_Nonsys_Desc;
    typedef struct {
        unsigned long Limit0 :16;
        unsigned long Base0  :24;
        unsigned long TYPE   :4;
        unsigned long S      :1;
        unsigned long DPL    :2;
        unsigned long p      :1;
        unsigned long Limit1 :4;
        unsigned long AVL    :1;
        unsigned long ZERO0  :3;
        unsigned long Base1  :8;
        unsigned long Base2  :32;
        unsigned long ZERO1  :32;
    } GDT_TSS_Desc;
    typedef struct __attribute__((__packed__)) {
        unsigned short   Limit;
        GDT_Nonsys_Desc* Offset;
    } GDTR;

    extern GDTR GDT_PTR;//Defined head.S
#pragma endregion

#pragma region IDT
    typedef struct{
        unsigned short Offset1;
        unsigned short Selector;
        unsigned short IST      : 3;
        unsigned short ZERO1    : 5;
        unsigned short TYPE     : 4;
        unsigned short ZERO2    : 1;
        unsigned short DPL      : 2;
        unsigned short P        : 1;
        unsigned short Offset2;
        unsigned int   Offset3;
        unsigned int   ZERO3;
    } IDT_Desc;
    typedef struct __attribute__((__packed__)) {
        unsigned short Limit;
        IDT_Desc*      Offset;
    } IDTR;
    typedef struct {
        long RIP;
        long CS;
        long RFLAG;
        long RSP;
        long SS;
    } Int_Frame;
    //With ErrorCode stack structure (before push EBP):
        //RSP      -> ErrorCode
        //RSP + 8  -> RIP
        //RSP + 16 -> CS
        //RSP + 24 -> RFLAG
        //RSP + 32 -> RSP
        //RSP + 40 -> SS
    //After interrupt, RSP -> ErrorCode, structure start from (RSP + 8), which is RIP
    extern IDTR IDT_PTR;//Defined head.S
#pragma endregion

#pragma region List
    typedef struct list{
        struct list *prev;
        struct list *next;
    } list;
#pragma endregion

#pragma region Memory
    #define PG_M 52
    typedef struct {
        unsigned long ZERO0   :3;
        unsigned long PWT     :1;
        unsigned long PCD     :1;
        unsigned long ZERO1   :7;
        unsigned long __PML4E :PG_M -12;
        unsigned long ZERO2   :64 - PG_M;
    } cr3;
    typedef struct{
        unsigned long P       :1;	//1b: Page in memory
        unsigned long RW      :1;	//1b: Writable (0 = Read only)
        unsigned long US      :1;	//1b: User mode (0 = Super Mode, only priviliage 0,1,2 can access)
        unsigned long PWT     :1;	
        unsigned long PCD     :1;
        unsigned long A       :1;	//0b: Not accessed, managed by system, if accessed, system will set it to 1b
        unsigned long ZERO0   :6;
        unsigned long __PDPTE :PG_M -12;	//Base address of PDPTE table
        unsigned long ZERO1   :64 - PG_M;
    } pml4e;
    typedef struct{
        unsigned long P       :1;	//1b: Page in memory
        unsigned long RW      :1;	//1b: Writable (0 = Read only)
        unsigned long US      :1;	//1b: User mode (0 = Super Mode, only priviliage 0,1,2 can access)
        unsigned long PWT     :1;
        unsigned long PCD     :1;
        unsigned long A       :1;	//0b: Not accessed, managed by system, if accessed, system will set it to 1b
        unsigned long ZERO0   :6;
        unsigned long __PDE   :PG_M -12;	//Base address of PDE table
        unsigned long ZERO1   :64 - PG_M;
    } pdpte;
    typedef struct{
        unsigned long P         :1;	//1b: Page in memory
        unsigned long RW        :1;	//1b: Writable (0 = Read only)
        unsigned long US        :1;	//1b: User mode (0 = Super Mode, only priviliage 0,1,2 can access)
        unsigned long PWT       :1;
        unsigned long PCD       :1;
        unsigned long A         :1;	//0b: Not accessed, managed by system, if accessed, system will set it to 1b
        unsigned long D         :1;	//Dirty
        unsigned long PS        :1;	//1b: Pointer => 2MB Pysical Base Address (0b = Pointer => PTE Base Address)
        unsigned long G         :1;	//0b: PS = 1b => Global; if CR4.PGE = 1, determines whether the translation is global (see Section 4.10); ignored otherwise
        unsigned long ZERO0     :3;
        unsigned long PAT       :1;
        unsigned long ZERO1     :8;
        unsigned long Page_Addr :PG_M -21;	//Base address of 2MB page due to PS = 1
        unsigned long ZERO2     :64 - PG_M;
    } pde;
    typedef struct __attribute__((__packed__)) {
        unsigned long	address;
        unsigned long	length;
        unsigned int	type;
    } e820;
    typedef struct{
        unsigned long PHY_Address;
        unsigned long Attr;
        unsigned long Ref_Count;
    }page;
	typedef struct{
		pml4e	PML4E_Attr;
		pde		PDE_Attr;
		pdpte	PDPTE_Attr;
	} pg_attr;
    typedef struct{
        unsigned long start_code;
        unsigned long end_code;
        unsigned long end_data;
        unsigned long end_rodata;
        unsigned long end_brk;
		unsigned long struct_end;
		unsigned long No_E820;
		unsigned long No_Page;
		unsigned long Used_Pages;
		unsigned long *bits_map;
		unsigned long bits_length;
		e820 *E820;
        page *Page;
    } glb_mem_desc;

	typedef struct{
		list 			 List;
		page 			*Page;
		void 			*Vaddress;
		unsigned long 	 using_count;
		unsigned long 	 free_count;
		unsigned long 	 color_length;
		unsigned long 	 color_count;
		unsigned long 	*color_map;
	} slab;

	typedef struct{
		unsigned long	 size;
		unsigned long	 total_using;
		unsigned long	 total_free;
		void 			*(* constructor)(void * Vaddress,unsigned long arg);
		void 			*(* destructor)(void * Vaddress,unsigned long arg);
		slab 			 cache_pool;
	} slab_cache;

    extern glb_mem_desc GLB_Men_Desc;
    extern unsigned long CR3;
    extern pml4e __PML4E[512];
    extern pdpte __PDPTE[512];
    extern pde   __PDE[512];

    extern char _text;
    extern char _etext;
    extern char _data;
    extern char _edata;
    extern char _rodata;
    extern char _erodata;
	extern char _bss;
	extern char _ebss;
    extern char _end;
#pragma endregion

#pragma region APIC
	typedef struct{
		unsigned int   physical_address;
		unsigned char *virtual_index_address;
		unsigned int  *virtual_data_address;
		unsigned int  *virtual_EOI_address;
	} ioapic_map;
	typedef struct  __attribute__((__packed__)) {
		unsigned int 	vector			:8;
		unsigned int 	deliver_mode	:3;
		unsigned int 	dest_mode		:1;
		unsigned int 	deliver_status	:1;
		unsigned int 	polarity		:1;
		unsigned int 	irr				:1;
		unsigned int 	trigger			:1;
		unsigned int 	mask			:1;
		unsigned int 	reserved		:15;
		union{
			struct {
				unsigned int 	reserved1		:24;
				unsigned int	phy_dest		:4;
				unsigned int	reserved2		:4;	//60~63
			}physical;

			struct {
				unsigned int 	reserved1		:24;
				unsigned int	logical_dest	:8;
			}logical;
		}destination;
	} rte;
	typedef struct{
		void 			(*enable)	(unsigned long irq);
		void 			(*disable)	(unsigned long irq);
		unsigned long 	(*install)	(unsigned long irq, void *arg);
		void 			(*uninstall)(unsigned long irq);
		void 			(*ack)		(unsigned long irq);
		void			(*do_soft)	(void);
	}hw_int_controller;
	typedef struct{
		hw_int_controller 	*controller;
		char 				*irq_name;
		unsigned long 		 parameter;
		unsigned long 		 flags;
		void (*handler)(unsigned long nr, unsigned long parameter);
	}irq_desc_T;
	irq_desc_T interrupt_desc[NR_IRQS] = {0};
	ioapic_map IOAPIC_MAP;
#pragma endregion

#pragma region wait_queue
typedef struct{
	list List;
	struct task_struct *tsk;
}wait_queue_T;
#pragma endregion

#pragma region Task
	typedef struct{
		pml4e * PML4E;
		unsigned long start_code;   //code seg
		unsigned long end_code;     
		unsigned long start_data;   //Data seg
		unsigned long end_data;
		unsigned long start_rodata; //Read only data seg
		unsigned long end_rodata;
		unsigned long start_bss;
		unsigned long end_bss;
		unsigned long start_brk;    //Heap seg
		unsigned long end_brk;
		unsigned long start_stack;  //Stack
	} mm_struct;
	typedef struct{
		unsigned long rsp0; 		//TSS->RSP0:   for interrupt
		unsigned long rsp;			//Current RSP: for switch
		unsigned long rsp_user;		//User RSP:    for user level
		unsigned long rip;
		unsigned long ds;
		unsigned long kernel_gs_base;
		unsigned long gs_base;
	} thread_struct;
	typedef struct task_struct{
		list            List;
		mm_struct       *mm;
		thread_struct   thread;
		volatile long   state; //Change regarding to state must write to memory (not saved in register or etc.)
		unsigned long   flag;
		unsigned long	exit_code;
		long 			cpu_id;
		long            pid;
		long            priority;
		long            vrun_time;
		wait_queue_T	wait_childexit;
		struct FS_entry	*fptr[TASK_FILE_MAX];
		struct task_struct * next;
		struct task_struct * parent;
	} task_struct;
	typedef union{
		task_struct Task;
		unsigned long Stack[STACK_SIZE/sizeof(long)]; //Total size would be 32KB
	} task_union;
	typedef struct {
		long running_task_count;
		long CPU_exec_task_jiffies;
		unsigned long switch_Time;
		task_struct task_queue;
	}schedule_struct;
    extern unsigned long _stack_start; 
	//init_task_union + 32KB 
	//init_task_union defined in task.h in segment .data.init_task, aligned in 32KB
#pragma endregion

#pragma region keyboard & mouse
	typedef struct{
		unsigned char *p_head;
		unsigned char *p_tail;
		unsigned long count;
		unsigned char buf[KB_BUF_SIZE];
		int shift_l;
		int shift_r;
		int ctrl_l;
		int ctrl_r;
		int alt_l;
		int alt_r;
	}key_buffer;
	typedef struct
	{	
		unsigned long mouse_count;
		unsigned char Byte0;	
			//7:Y overflow,
			//6:X overflow,
			//5:Y sign bit,
			//4:X sign bit,
			//3:Always,
			//2:Middle Btn,
			//1:Right Btn,
			//0:Left Btn
		char Byte1;				//X movement
		char Byte2;				//Y movement
	} mouse_packet;
#pragma endregion

#pragma region Time
	typedef struct{
		int cent;	//0x32
		int year;	//0x09
		int month;	//0x08
		int day;	//0x07
		int hour;	//0x04
		int minute;	//0x02
		int second;	//0x00
	} time;
	typedef struct{
		unsigned long REV_ID			:8;	//Indicates which revision of the function is implemented; must not be 0.
		unsigned long NUM_TIM_CAP		:5;	//The amount of timers - 1.
		unsigned long COUNT_SIZE_CAP	:1;	//If this bit is 1, HPET main counter is capable of operating in 64 bit mode.
		unsigned long Reserved			:1;
		unsigned long LEG_RT_CAP		:1;	//If this bit is 1, HPET is capable of using "legacy replacement" mapping.
		unsigned long VENDOR_ID			:16;//This field should be interpreted similarly to PCI's vendor ID.
		unsigned long COUNTER_CLK_PERIOD:32;//Main counter tick period in femtoseconds (10^-15 seconds). Must not be zero, must be less or equal to 0x05F5E100, or 100 nanoseconds.
	} gcap_id;
	typedef struct{
		unsigned long ENABLE_LEG_CNF:2;	//Bit 0: Enable countor flag
			//Bit 1: Legacy mapping (1b = Mapping Timer[0] to APIC 0x22, Timer[1] to APIC 0x28)
										
		unsigned long reserved	:62;
	}gen_conf;
	typedef struct{
		unsigned int Tn_INT_STS;//The functionality is dependent of whether edge or level-triggered mode is used for timer #n.
								//For level-triggered: 	The default value is 0. When a corresponding timer interrupt is active, this bit is set. 
								//						If it is set, software can clear it by writing 1 to this bit. Writes of 0 have no effect.
								//For edge-triggered: 	This bit should be ignored. It is always set to 0.
		unsigned int reserved;
	}gintr_sta;
	typedef struct{
		unsigned long 	Reserved1			:1;
		unsigned long	Tn_INT_TYPE_CNF		:1;		//0:Edge interrupt; 1:Level interrupt.
		unsigned long	Tn_INT_ENB_CNF		:1;		//1:Enable interrupt; 0:Disable
		unsigned long 	Tn_TYPE_CNF			:1;		//1:Periodical mode; 0:One shot mode
		unsigned long	Tn_PER_INT_CAP		:1;		//Readonly: 1 = Suppport periodical mode
		unsigned long	Tn_SIZE_CAP			:1;		//Readonly: 1 = 64bit width	
		unsigned long 	Tn_VAL_SET_CNF		:1;		//Allow software write timer value when running
		unsigned long 	Reserved2			:1;
		unsigned long 	Tn_32MODE_CNF		:1;		//If 64bit timer(Tn_SIZE_CAP=1): 1b = 32bit mode.
		unsigned long	Tn_INT_ROUTE_CNF	:5;		//Select valid IRQs in Tn_INT_ROUTE_CAP for I/O APIC
		unsigned long 	Tn_FSB_EN_CNF		:1;		//1b = Using FSB interrupt mode
		unsigned long	Tn_FSB_INT_DEL_CAP	:1;		//Readonly: 1b = Support FSB interrupt mode
		unsigned long	Tn_INT_ROUTE_CAP	:32;	//If bit X is set in this field, it means that this timer can be mapped to IRQX line of I/O APIC.
		unsigned long 	Timer;
	}timer_reg;
	typedef struct{
		gcap_id 		GCAP_ID;
		unsigned long 	reserved1;
		gen_conf		GEN_CONF;
		unsigned long 	reserved2;
		gintr_sta		GINTR_STA;
		unsigned long 	reserved3[25];
		unsigned long   MAIN_CNT;
		unsigned long 	reserved4;
		timer_reg		TIMER_REG[1];
	}hpet_reg;
	typedef struct{
		list List;
		unsigned long exp_jiffies;
		void (*func)(void *data);
		void *data;
	} timer_list;
	timer_list Timer_List_Header;
	unsigned long volatile jiffies;
#pragma endregion

#pragma region SoftIRQ
	typedef struct{
		void (*action)(void *data);
		void *data;
	}softirq;
	softirq SoftIRQ_vector[64];
	unsigned long SoftIRQ_status;
#pragma endregion

#pragma region ACPI
	typedef struct __attribute__((__packed__)) {
		char 			Signature[8];
		char 			Checksum;
		char 			OEMID[6];
		char 			Revision;
		unsigned int 	RSDT;		//Version 1.0 Structure end here
		unsigned int 	Length;
		unsigned long 	XSDT;
		char 			ExtendedChecksum;
		char 			reserved[3];
	}rsdp;
	typedef struct __attribute__((__packed__)) {
		char			Signature[4];
		unsigned int 	Length;
		char			Revision;
		char			Checksum;
		char 			OEMID[6];
		unsigned long 	OEM_Table_ID;
		unsigned int	OEN_Revision;
		unsigned int	Creator_ID;
		unsigned int 	Creator_Revision;
		union{
			unsigned int 	L32[1];
			unsigned long 	L64[1];
		} Entry;
	} acpi_table;
	typedef struct{
		char			Signature[4];
		unsigned int 	Length;
		char			Revision;
		char			Checksum;
		char 			OEMID[6];
		unsigned long 	OEM_Table_ID;
		unsigned int	OEN_Revision;
		unsigned int	Creator_ID;
		unsigned int 	Creator_Revision;
	} sdt_header;
	typedef struct{
		unsigned long 	Base_Addr;
		unsigned short 	PCI_Seg_Grp;
		unsigned char	Start_Bus;
		unsigned char	End_Bus;
	}pci_conf_base;
	typedef struct __attribute__((packed))
	{
		char address_space_id;    // 0 - system memory, 1 - system I/O
		char register_bit_width;
		char register_bit_offset;
		char reserved;
		unsigned long address;
	} address_structure;
	typedef struct __attribute__((__packed__)) {
		char hardware_rev_id;
		char comparator_count:5;
		char counter_size:1;
		char reserved:1;
		char legacy_replacement:1;
		unsigned short pci_vendor_id;
		address_structure address;
		char hpet_number;
		unsigned short minimum_tick;
		char page_protection;
	} hpet;
	typedef struct{
		acpi_table 		*MADT;
		acpi_table 		*MCFG;
		unsigned int 	*LAPIC_BASE;
		unsigned int 	*IOAPIC_BASE;
		pci_conf_base 	*PCI_CONF_BASE;
		unsigned long	 No_PCI_Base;
		hpet 			*HPET;
		unsigned long	 No_HPET;
		unsigned long	 LAPIC_VIRT_BASE;
		unsigned long	 IOAPIC_VIRT_BASE;
		hpet_reg	 	*HPET_REG;
	} acpi_spec;
	acpi_spec ACPI;
#pragma endregion

#pragma region PCI
typedef struct __attribute__((__packed__)){
	unsigned short MSI_Enable:1;
	unsigned short Mult_msg:3;
	unsigned short Mult_enab:3;
	unsigned short Addr_64:1;
	unsigned short zero:8;
} mcr;// Message control register
typedef struct {
	unsigned int fix:2;
	unsigned int DM:1;
	unsigned int RH:1;
	unsigned int zero:8;
	unsigned int Dest_ID:8;
	unsigned int Pre_fix:12;
}mar;// Message address register
typedef struct {
	unsigned short Vector:8;
	unsigned short Del_Mode:3;
	unsigned short zero:3;
	unsigned short Level:1;
	unsigned short Trg_Mode:1;
}mdr;// Message data register
typedef struct{
	unsigned char Cap_ID;
	unsigned char Next_Ptr;
	mcr MCR;
	mar MAR;
	int MAR_up;
	mdr MDR;
} msi_64;
typedef struct{
	unsigned char Cap_ID;
	unsigned char Next_Ptr;
	mcr MCR;
	mar MAR;
	mdr MDR;
} msi_32;
typedef struct{
	unsigned char Cap_ID;
	unsigned char Next_Ptr;
	unsigned long Tbl_Size:11;
	unsigned long Rsv:3;
	unsigned long Fnc_Msk:1;
	unsigned long Enable:1;
	unsigned long TlbBIR:3;
	unsigned long TblOff:29;
	unsigned long PBABIR:3;
	unsigned long PBAOff:29;
} msi_x;
typedef struct {
	unsigned int Mask		: 1;
	unsigned int Rsvd		:31;
} mcrx;
typedef struct{
	int  MAR;
	int  MAR_up;
	int  MDR;
	int  MCRX;
} msixtbl;
#pragma endregion

#pragma region AHCI
	typedef struct{
		unsigned char  fis_type;	// FIS_TYPE_REG_H2D: 0x27
		unsigned char  pmport:4;	// Port multiplier
		unsigned char  rsv0:3;		// Reserved
		unsigned char  c:1;			// 1: Command, 0: Control
		unsigned char  command;		// Command register
		unsigned char  featurel;	// Feature register, 7:0
		unsigned int   lbal:24;		// LBA low
		unsigned int   device:8;	// Device register
		unsigned int   lbah:24;		// LBA high
		unsigned int   featureh:8;	// Feature register, 15:8
		unsigned short count;		// Count register, 7:0
		unsigned char  icc;			// Isochronous command completion
		unsigned char  control;		// Control register
		unsigned char  rsv1[4];		// Reserved
	} FIS_REG_H2D;
	typedef struct{
		unsigned char  fis_type;    // FIS_TYPE_REG_D2H
		unsigned char  pmport:4;    // Port multiplier
		unsigned char  rsv0:2;      // Reserved
		unsigned char  i:1;         // Interrupt bit
		unsigned char  rsv1:1;      // Reserved
		unsigned char  status;      // Status register
		unsigned char  error;       // Error register
		unsigned char  lba0;        // LBA low register, 7:0
		unsigned char  lba1;        // LBA mid register, 15:8
		unsigned char  lba2;        // LBA high register, 23:16
		unsigned char  device;      // Device register
		unsigned char  lba3;        // LBA register, 31:24
		unsigned char  lba4;        // LBA register, 39:32
		unsigned char  lba5;        // LBA register, 47:40
		unsigned char  rsv2;        // Reserved
		unsigned char  countl;      // Count register, 7:0
		unsigned char  counth;      // Count register, 15:8
		unsigned char  rsv3[2];     // Reserved
		unsigned char  rsv4[4];     // Reserved
	} FIS_REG_D2H;
	typedef struct{
		unsigned char  fis_type;// FIS_TYPE_PIO_SETUP
		unsigned char  pmport:4;// Port multiplier
		unsigned char  rsv0:1;	// Reserved
		unsigned char  d:1;		// Data transfer direction, 1 - device to host
		unsigned char  i:1;		// Interrupt bit
		unsigned char  rsv1:1;
		unsigned char  status;	// Status register
		unsigned char  error;	// Error register
		unsigned char  lba0;	// LBA low register, 7:0
		unsigned char  lba1;	// LBA mid register, 15:8
		unsigned char  lba2;	// LBA high register, 23:16
		unsigned char  device;	// Device register
		unsigned char  lba3;	// LBA register, 31:24
		unsigned char  lba4;	// LBA register, 39:32
		unsigned char  lba5;	// LBA register, 47:40
		unsigned char  rsv2;	// Reserved
		unsigned char  countl;	// Count register, 7:0
		unsigned char  counth;	// Count register, 15:8
		unsigned char  rsv3;	// Reserved
		unsigned char  e_status;// New value of status register
		unsigned short tc;		// Transfer count
		unsigned char  rsv4[2];	// Reserved
	} FIS_PIO_SETUP;
	typedef struct __attribute__((__packed__)){
		unsigned char  fis_type;		// FIS_TYPE_DMA_SETUP
		unsigned char  pmport:4;		// Port multiplier
		unsigned char  rsv0:1;			// Reserved
		unsigned char  d:1;				// Data transfer direction, 1 - device to host
		unsigned char  i:1;				// Interrupt bit
		unsigned char  a:1;         	// Auto-activate. Specifies if DMA Activate FIS is needed
		unsigned char  rsved[2];    	// Reserved
		unsigned long  DMAbufferID;  	// DMA Buffer Identifier. Used to Identify DMA buffer in host memory. SATA Spec says host specific and not in Spec. Trying AHCI spec might work.
		unsigned int   rsvd;          	// More reserved
		unsigned int   DMAbufOffset;  	// Byte offset into buffer. First 2 bits must be 0
		unsigned int   TransferCount; 	// Number of bytes to transfer. Bit 0 must be 0
		unsigned int   resvd;         	// Reserved
	} FIS_DMA_SETUP;
	typedef struct{
		unsigned char 	fis_type;// 0xA1
		unsigned char	PM_Port:4;
		unsigned char	rsv0:2;
		unsigned char	i:1;
		unsigned char	n:1;
		unsigned char	stat_l:3;
		unsigned char	rsv1:1;
		unsigned char	stat_h:3;
		unsigned char	rsv2:1;
		unsigned char	Error;
		unsigned int	NCQ;
	}FIS_DEV_BITS;
	typedef volatile struct{
		// 0x00
		FIS_DMA_SETUP	dsfis;		// DMA Setup FIS
		unsigned char   pad0[4];
		FIS_PIO_SETUP	psfis;		// PIO Setup FIS
		unsigned char  	pad1[12];
		FIS_REG_D2H		rfis;		// Register – Device to Host FIS
		unsigned char   pad2[4];
		FIS_DEV_BITS	sdbfis;		// Set Device Bit FIS
		unsigned char   ufis[64];
		unsigned char  	rsv[0x100-0xA0];
	} HBA_FIS;
	typedef struct{
		unsigned long dba;		// Data base address
		unsigned int rsv0;		// Reserved
		unsigned int dbc:22;	// Byte count, 4M max
		unsigned int rsv1:9;	// Reserved
		unsigned int i:1;		// Interrupt on completion: need to set PxIE.DPE
	} HBA_PRDT_ENTRY;
	typedef struct{
		unsigned char  	cfis[64];	// Command FIS
		unsigned char  	acmd[16];	// ATAPI command, 12 or 16 bytes
		unsigned char  	rsv[48];	// Reserved
		HBA_PRDT_ENTRY  prdt_entry[1];	// Physical region descriptor table entries, 0 ~ 65535
	} HBA_CMD_TBL;
	typedef struct{
		unsigned char  cfl:5;		// Command FIS length in DWORDS, 2 ~ 16
		unsigned char  a:1;			// ATAPI
		unsigned char  w:1;			// Write, 1: H2D, 0: D2H
		unsigned char  p:1;			// Prefetchable
		unsigned char  r:1;			// Reset
		unsigned char  b:1;			// BIST
		unsigned char  c:1;			// Clear busy upon R_OK
		unsigned char  rsv0:1;		// Reserved
		unsigned char  pmp:4;		// Port multiplier port
		unsigned short prdtl;		// Physical region descriptor table length in entries (number of entries)
		volatile unsigned int prdbc;// Physical region descriptor byte count transferred
		HBA_CMD_TBL *ctba;			// Command table descriptor base address
		unsigned int rsv1[4];		// Reserved
	} HBA_CMD_HEADER;
	typedef volatile struct{
		HBA_CMD_HEADER *clb;	// 0x00, command list base physical address, 1K-byte aligned
		HBA_FIS 	*fb;		// 0x08, FIS base address, 256-byte aligned
		unsigned int is;		// 0x10, interrupt status
		unsigned int ie;		// 0x14, interrupt enable
		unsigned int cmd;		// 0x18, command and status
		unsigned int rsv0;		// 0x1C, Reserved
		unsigned int tfd;		// 0x20, task file data
		unsigned int sig;		// 0x24, signature
		unsigned int ssts;		// 0x28, SATA status (SCR0:SStatus)
		unsigned int sctl;		// 0x2C, SATA control (SCR2:SControl)
		unsigned int serr;		// 0x30, SATA error (SCR1:SError)
		unsigned int sact;		// 0x34, SATA active (SCR3:SActive)
		unsigned int ci;		// 0x38, command issue
		unsigned int sntf;		// 0x3C, SATA notification (SCR4:SNotification)
		unsigned int fbs;		// 0x40, FIS-based switch control
		unsigned int rsv1[11];	// 0x44 ~ 0x6F, Reserved
		unsigned int vendor[4];	// 0x70 ~ 0x7F, vendor specific
	} HBA_PORT;
	typedef volatile struct{
		// 0x00 - 0x2B, Generic Host Control
		unsigned int cap;					// 0x00, Host capability
		unsigned int ghc;					// 0x04, Global host control
		unsigned int is;					// 0x08, Interrupt status
		unsigned int pi;					// 0x0C, Port implemented
		unsigned int vs;					// 0x10, Version
		unsigned int ccc_ctl;				// 0x14, Command completion coalescing control
		unsigned int ccc_pts;				// 0x18, Command completion coalescing ports
		unsigned int em_loc;				// 0x1C, Enclosure management location
		unsigned int em_ctl;				// 0x20, Enclosure management control
		unsigned int cap2;					// 0x24, Host capabilities extended
		unsigned int bohc;					// 0x28, BIOS/OS handoff control and status
		unsigned char  rsv[0xA0-0x2C];		// 0x2C - 0x9F, Reserved
		unsigned char  vendor[0x100-0xA0];	// 0xA0 - 0xFF, Vendor specific registers
		HBA_PORT	ports[1];				// 0x100 - 0x10FF, Port control registers: 1 ~ 32
	} HBA_MEM;
	typedef struct{
		union{
			msi_64* _64;
			msi_32* _32;
		} MSI;
		int No_slot;
		HBA_MEM* ABAR;
		int SATA;
		int trg_port;
	} ahci;
	ahci AHCI;
#pragma endregion

#pragma region SMP
	typedef struct{
		task_union	*SMP_TASK_PTR;
		TSS_Struct 	*SMP_TSS_TABLE_PTR;
		task_union	*EXMP_TASK_PTR;
		int 		global_i;
		int			Tot_Cores;
		spinlock_T 	SMP_lock;
	}smp_ctl;
	smp_ctl SMP_CTL;
	extern unsigned char _APU_boot_start[];
	extern unsigned char _APU_boot_end[];
#pragma endregion

#pragma region FAT32
#define	ATTR_READ_ONLY	(1 << 0)
#define ATTR_HIDDEN	(1 << 1)
#define ATTR_SYSTEM	(1 << 2)
#define ATTR_VOLUME_ID	(1 << 3)
#define ATTR_DIRECTORY	(1 << 4)
#define ATTR_ARCHIVE	(1 << 5)
#define ATTR_LONG_NAME	(ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID)
typedef struct __attribute__((__packed__)){
	unsigned char   flags;
	unsigned char   start_head;
	unsigned short  start_sector	:6;
	unsigned short	start_cylinder	:10;
	unsigned char   type;
	unsigned char   end_head;
	unsigned short  end_sector	    :6;
	unsigned short	end_cylinder	:10;
	unsigned int    start_LBA;
	unsigned int    sectors_limit;
} Disk_Partition_Table_Entry;
typedef struct __attribute__((__packed__)){
	unsigned char 				BS_Reserved[446];
	Disk_Partition_Table_Entry 	DPTE[4];
	unsigned short 				BS_TrailSig;
}Disk_Partition_Table;
typedef struct __attribute__((__packed__)){
	unsigned char 	BS_jmpBoot[3];
	unsigned char 	BS_OEMName[8];
	unsigned short 	BPB_BytesPerSec;
	unsigned char 	BPB_SecPerClus;
	unsigned short 	BPB_RsvdSecCnt;
	unsigned char 	BPB_NumFATs;
	unsigned short 	BPB_RootEntCnt;
	unsigned short 	BPB_TotSec16;
	unsigned char 	BPB_Media;
	unsigned short 	BPB_FATSz16;
	unsigned short 	BPB_SecPerTrk;
	unsigned short 	BPB_NumHeads;
	unsigned int 	BPB_HiddSec;
	unsigned int 	BPB_TotSec32;
	unsigned int 	BPB_FATSz32;
	unsigned short 	BPB_ExtFlags;
	unsigned short 	BPB_FSVer;
	unsigned int 	BPB_RootClus;
	unsigned short 	BPB_FSInfo;
	unsigned short 	BPB_BkBootSec;
	unsigned char 	BPB_Reserved[12];
	unsigned char 	BS_DrvNum;
	unsigned char 	BS_Reserved1;
	unsigned char 	BS_BootSig;
	unsigned int 	BS_VolID;
	unsigned char 	BS_VolLab[11];
	unsigned char 	BS_FilSysType[8];
	unsigned char 	BootCode[420];
	unsigned short 	BS_TrailSig;
} FAT32_BootSector;
typedef struct __attribute__((__packed__)){
	unsigned int	FSI_LeadSig;
	unsigned char 	FSI_Reserved1[480];
	unsigned int 	FSI_StrucSig;
	unsigned int 	FSI_Free_Count;		//Number of free CLUSTER
	unsigned int 	FSI_Nxt_Free;
	unsigned char 	FSI_Reserved2[12];
	unsigned int 	FSI_TrailSig;
} FAT32_FSInfo;
typedef struct __attribute__((__packed__)){
	unsigned char 	DIR_Name[11];
	unsigned char 	DIR_Attr;
	unsigned char 	DIR_NTRes;
	unsigned char 	DIR_CrtTimeTenth;
	unsigned short 	DIR_CrtTime;	
	unsigned short 	DIR_CrtDate;
	unsigned short 	DIR_LastAccDate;
	unsigned short 	DIR_FstClusHI;
	unsigned short 	DIR_WrtTime;
	unsigned short 	DIR_WrtDate;
	unsigned short 	DIR_FstClusLO;
	unsigned int 	DIR_FileSize;	//(Size of the file + 1) in byte
} FAT32_Directory;
typedef struct __attribute__((__packed__)){
	unsigned char 	LDIR_Ord;
	unsigned short 	LDIR_Name1[5];
	unsigned char 	LDIR_Attr;
	unsigned char 	LDIR_Type;
	unsigned char 	LDIR_Chksum;
	unsigned short 	LDIR_Name2[6];
	unsigned short 	LDIR_FstClusLO;
	unsigned short 	LDIR_Name3[2];
}FAT32_LongDirectory;
#pragma endregion

#pragma region VFS
struct file_ops;
struct FS_entry;
struct super_block;
typedef struct FS_entry{
	char *name;
	int name_length;
	unsigned long attr;
	struct FS_entry *parent_entry;
	unsigned long first_cluster;
	struct super_block *sp;
	list FS_node;
	unsigned long parent_offset;
	union{
		struct{
			list subdir_list;
			struct dir_ops *ops;
		} dir;
		struct{
			long pos;
			void *Data;
			unsigned long size;
			unsigned long mode;
			struct file_ops *ops;
		}file;
	} type;
} FS_entry;
typedef struct{
	FS_entry * (*Search_FS)(char* name, int name_len, FS_entry *parent);
} super_block_op;
typedef struct file_ops{
	long (*open)(FS_entry * entry);
	long (*close)(FS_entry * entry);
	long (*read)(FS_entry *entry, void *buf, unsigned long count);
	long (*write)(FS_entry *entry, void *buf, unsigned long count);
	long (*lseek)(FS_entry *entry, long offset, unsigned long whence);
	long (*ioctl)(unsigned long cmd);
} file_ops;
typedef struct dir_ops{
	long (*lsdir)(FS_entry *entry);
} dir_ops;
typedef struct super_block{
	FS_entry root;
	super_block_op sb_op;
	void * private_sb_info;
} super_block;
typedef struct{
	unsigned long FirstDataSector;
	unsigned long BytesPerClus;
	unsigned long FirstFAT1Sector;
	unsigned long FirstFAT2Sector;
	unsigned long sector_per_FAT;
	FAT32_FSInfo fat32_fsinfo;
	FAT32_BootSector fat32_bootsector;
}FAT32_sb_info;
typedef struct file_system_type{
	char * name;
	int fs_flags;
	super_block * (*read_superblock)(Disk_Partition_Table_Entry *DPTE);
	struct file_system_type *next;
} file_system_type;
#pragma endregion

#pragma region UEFI Kernel Info
typedef struct {
    unsigned int E820_Entry_count;
    e820 E820_Entry[0];
} EFI_E820_MEMORY_DESCRIPTOR_INFORMATION;
typedef struct {
    int XResolution;
    int YResolution;
    unsigned long FB_addr;
    unsigned long FB_length;
} UEFI_position;
typedef struct {
    UEFI_position Graphics_Info;
    rsdp RSDP;
    EFI_E820_MEMORY_DESCRIPTOR_INFORMATION E820_Info;
} KERNEL_BOOT_PARAMETER_INFORMATION;

extern KERNEL_BOOT_PARAMETER_INFORMATION *kernel_boot_para_info;
#pragma endregion

#pragma region GPT
typedef struct __attribute__((__packed__)){
	unsigned char 	Signature[8];	//签名("EFI PART", 45 46 49 20 50 41 52 54) 
	unsigned char 	Revision[4]; 	//版本
	unsigned int 	HeaderSize;		//头大小
	unsigned int 	CRC32_Header;	//CRC32 of header
	unsigned int 	reserved;		//保留, must be zero 
	unsigned long 	CurrentThisLBA;	//第一个EFI PART所在扇区号
	unsigned long 	BackupOtherLBA;	//EFI PART备份所在扇区号
	unsigned long 	FirstLBAPar;	//第一个有效分区起始扇区号
	unsigned long 	LastLBA;		//最后一个分区结束扇区号
	unsigned char 	DiskGUID[16];	//also referred as UUID on UNIXes
	unsigned long  	ParStarLBA;		//GPT入口
	unsigned int  	ParNum;			//可以容纳分区个数	
	unsigned int 	ParSize;		//每个分区项占用字节
	unsigned int 	CRC32;			//CRC32 of partition array 
} gpt_head;
typedef union{
	gpt_head GPT_HEAD;
	unsigned char nozz[512];
}gpt_lba1;


typedef struct __attribute__((__packed__)){
	char PartGUID[16];			//16个字节//分区类型GUID
	char UniquePartGUID[16];	// 16个字节//分区GUID
	unsigned long StartSec;	//First LBA分区起始扇区
	unsigned long EndSec;		//Last LBA
	unsigned long AttributeFlags;
	char PartitionName[72];		//72个字节
} gpt_part_entry;
#pragma endregion

#pragma region NVME
typedef struct {
	unsigned long   mqes	:16;    ///< max queue entries supported
	unsigned long   cqr     : 1;    ///< contiguous queues required
	unsigned long   ams     : 2;    ///< arbitration mechanism supported
	unsigned long   rsvd    : 5;    ///< reserved
	unsigned long   to		: 8;    ///< timeout
	unsigned long   dstrd   : 4;    ///< doorbell stride
	unsigned long   nssrs   : 1;    ///< NVM subsystem reset supported
	unsigned long   css     : 8;    ///< command set supported
	unsigned long   rsvd2   : 3;    ///< reserved
	unsigned long   mpsmin  : 4;    ///< memory page size minimum
	unsigned long   mpsmax  : 4;    ///< memory page size maximum
	unsigned long   rsvd3   : 8;    ///< reserved
} controller_cap;
typedef struct{
	unsigned int    rsvd    : 8;    ///< reserved
	unsigned int    mnr		: 8;    ///< minor version number
	unsigned int    mjr		:16;    ///< major version number
} controller_vs;
typedef struct{
	unsigned int    en      : 1;    ///< enable
	unsigned int    rsvd    : 3;    ///< reserved
	unsigned int    css     : 3;    ///< I/O command set selected
	unsigned int    mps     : 4;    ///< memory page size
	unsigned int    ams     : 3;    ///< arbitration mechanism selected
	unsigned int    shn     : 2;    ///< shutdown notification
	unsigned int    iosqes  : 4;    ///< I/O submission queue entry size
	unsigned int    iocqes  : 4;    ///< I/O completion queue entry size
	unsigned int    rsvd2   : 8;    ///< reserved
} controller_cc;
typedef struct{
	unsigned int    rdy     : 1;    ///< ready
	unsigned int    cfs     : 1;    ///< controller fatal status
	unsigned int    shst    : 2;    ///< shutdown status
	unsigned int    rsvd    : 28;   ///< reserved
} controller_csts;
typedef struct{
	unsigned int	asqs	:12;	///< admin submission queue size
	unsigned int	rsvd0	:4;
	unsigned int	acqs	:12;	///< admin completion queue size
	unsigned int	rsvd1	:4;
} controller_aqa;
typedef struct __attribute__((__packed__)){
    controller_cap   		cap;        ///< controller capabilities
    controller_vs          	vs;         ///< version
    unsigned int            intms;      ///< interrupt mask set
    unsigned int            intmc;      ///< interrupt mask clear
    controller_cc 			cc;        	///< controller configuration
    unsigned int            rsvd;       ///< reserved
    controller_csts 		csts;       ///< controller status
    unsigned int            nssr;       ///< NVM subsystem reset
    controller_aqa      	aqa;        ///< admin queue attributes
    unsigned long           asq;        ///< admin submission queue base address
    unsigned long           acq;        ///< admin completion queue base address
} mbar;
typedef struct{
	unsigned short SQTdbl;
	unsigned short rsvd0;
	unsigned short CQHdbl;
	unsigned short rsvd1;
} controller_dbl;
typedef struct{
	mbar    *MBAR;
	controller_dbl *DBL[NR_CPUS];
	msi_x   *MSIX;
	msixtbl *MSIXTBL;
} nvme;
typedef struct {
	unsigned short 	opc;		//opcode
	unsigned short 	fuse:2;		//If simple command, clear to 0
	unsigned short 	rsvd0:4;
	unsigned short 	psdt:2; 	//00b = PRP; 01b = SGL
	unsigned int 	cid; 		//Command identifier
	unsigned int 	nsid; 		//Namespace if not used clear to 0
	unsigned long 	rsvd1;
	unsigned long 	mptr;
	unsigned long 	prp[2];
	union{
		unsigned long raw[5];
	}nvme_payload;
}nvme_sq;
#pragma endregion

extern nvme NVME;
extern int glb_ind;